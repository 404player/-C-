/* =====================**
** 线性表的顺序存储结构 **
**======================*/



#ifndef SQLIST_H
#define SQLIST_H


#include <stdio.h>
#include <stdlib.h>
#include "Status.h"


/* ==================== **
**       宏定义         **
**======================*/
#define ListInitSize  10000


/*   顺序表数据元素类型定义 */
typedef int ElemType;

/* ========================================
**             顺序表结构                **
**       elem使用前要先分配内存          **
**            从elem[0]开始              **
** ======================================*/


typedef struct
{

    ElemType *elem;   //顺序表存储空间基地址
    int length;       //顺序表当前长度
    int listsize;     //当前分配的存储容量
}SqList;


/* ==================================== **
**               初始化                 **
**     成功返回OK，否则返回ERROR        **
** ==================================== */

Status InitList(SqList* L);



/* ==================================== **
**               销毁                   **
**      释放顺序表所占的内存            **
** ==================================== */

Status DestroyList(SqList* L);

/* ==================================== **
**              置空                    **
**      只重置为空表,不释放内存         **
** ==================================== */

Status ClearList(SqList* L);


/* ==================================== **
**               判空                   **
**        判断顺序表中是否含有数据      **
**        有返回True,没有返回ERROR      **
** ==================================== */

Status ListEmpty(SqList L);

/* ==================================== **
**               计数                   **
**      返回L中数据元素个数             **
** ==================================== */

int ListLength(SqList L);

/* ==================================== **
**               取值                   **
**     返回表中第i个元素，并赋给e       **
**          i的值从1开始算              **
** ==================================== */

int GetElem(SqList L, int i, ElemType* e);

/* ============================================ **
**                    查找                      **
**   返回顺序表中与e符合compare关系的元素位序   **
**           若查找失败，则返回0                **
**       元素e是compare函数的第二个形参         **
** ============================================= */

int LocateElem(SqList L, ElemType e, Status(Compare)(ElemType,ElemType));

/* ============================================ **
**                    寻找前驱                  **
**               获取元素cur_e的前驱            **
**       若存在，将值存储至pre_e,并返回OK       **
**             若不存在，返回ERROR              **
** ============================================= */

Status PriorElem(SqList L, ElemType cur_e, ElemType* pre_e);


/* ============================================ **
**                    寻找后继                  **
**               获取元素cur_e的后继            **
**       若存在，将值存储至next_e,并返回OK      **
**              若不存在，返回ERROR             **
** ============================================= */

Status NextElem(SqList L, ElemType cur_e, ElemType* next_e);

/* ============================================ **
**                     插入元素                 **
**             向顺序表第i个元素插入元素e       **
**                 插入成功则返回OK             **
**                  否则返回ERROR               **
** ============================================= */

Status ListInsert(SqList* L, int i, ElemType e);


/* ============================================ **
**                     删除元素                 **
**             向顺序表第i个元素删除元素e       **
**    删除成功则返回OK，并将删除元素存储到e中   **
**                  否则返回ERROR               **
** ============================================= */

Status ListDelete(SqList* L, int i, ElemType* e);

/* ============================================ **
**                     遍历                     **
**          用Visit函数访问顺序表               **
** ============================================= */

void TraverseList(SqList L, void(Visit)(ElemType));
#endif // SQLIST_H
